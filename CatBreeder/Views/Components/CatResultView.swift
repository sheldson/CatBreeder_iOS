//
//  CatResultView.swift
//  CatBreeder
//
//  Created by AI Assistant on 2025/8/23.
//

import SwiftUI

// MARK: - Áå´Âí™ËØ¶ÊÉÖÂºπÁ™ó
struct CatResultView: View {
    let cat: Cat
    @EnvironmentObject var gameData: GameData
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
        NavigationView {
            VStack(spacing: 30) {
                Spacer()
                
                // Â∫ÜÁ•ùÊïàÊûú
                CelebrationHeader()
                
                // Áå´Âí™Â±ïÁ§∫
                CatCardView(cat: cat, size: .large)
                
                // Áå´Âí™ËØ¶ÁªÜ‰ø°ÊÅØ
                CatDetailInfo(cat: cat)
                
                Spacer()
                
                // ÂÖ≥Èó≠ÊåâÈíÆ
                DismissButton {
                    dismiss()
                }
            }
            .padding()
            .navigationTitle("Êñ∞Áå´Âí™")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("ÂÖ≥Èó≠") {
                        dismiss()
                    }
                }
            }
        }
    }
}

// MARK: - Â∫ÜÁ•ùÂ§¥ÈÉ®
struct CelebrationHeader: View {
    var body: some View {
        VStack(spacing: 20) {
            Text("üéâ")
                .font(.system(size: 60))
            
            Text("ÊÅ≠ÂñúËé∑ÂæóÊñ∞Áå´Âí™ÔºÅ")
                .font(.title2)
                .fontWeight(.bold)
        }
    }
}

// MARK: - Áå´Âí™ËØ¶ÁªÜ‰ø°ÊÅØ
struct CatDetailInfo: View {
    let cat: Cat
    
    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            InfoRow(title: "ÂêçÁß∞", value: cat.displayName)
            InfoRow(title: "Á®ÄÊúâÂ∫¶", value: cat.rarity.rawValue)
            InfoRow(title: "È¢úËâ≤", value: cat.colorDescription)
            InfoRow(title: "ÁúºÁùõ", value: cat.appearance.eyeColor.rawValue)
            
            if cat.appearance.hasSpecialEffects {
                InfoRow(title: "ÁâπÊïà", value: "‚ú® ÁâπÊÆäÊïàÊûú")
            }
        }
        .padding()
        .background(
            RoundedRectangle(cornerRadius: 12)
                .fill(.ultraThinMaterial)
        )
    }
}

// MARK: - ÂÖ≥Èó≠ÊåâÈíÆ
struct DismissButton: View {
    let action: () -> Void
    
    var body: some View {
        Button("Â§™Ê£í‰∫ÜÔºÅ", action: action)
            .buttonStyle(.borderedProminent)
            .controlSize(.large)
    }
}

// MARK: - ‰ø°ÊÅØË°å
struct InfoRow: View {
    let title: String
    let value: String
    
    var body: some View {
        HStack {
            Text(title)
                .fontWeight(.medium)
                .foregroundColor(.secondary)
            Spacer()
            Text(value)
                .fontWeight(.semibold)
        }
    }
}

#Preview {
    let genetics = GeneticsData.random()
    let cat = Cat(genetics: genetics)
    
    return CatResultView(cat: cat)
        .environmentObject(GameData())
}